{"name":"Rashell","tagline":"Resilient replicant Shell Programming Library","body":"# Rashell, the resilient and replicant shell programming library\r\n\r\nAs discussed by Lowell Jay Arthur in *Unix shell programming*\r\n(2nd ed.), the Unix shell is a brillant tool for quickly\r\ndesigning prototypes.  Unluckily, error management is very\r\ndifficult in the shell.  Most interfaces to the Unix shell found in\r\nprogramming languages share this fragile optimism, which makes\r\nimpossible to write maintainable and resilient programs.\r\n\r\n**Rashell** defines primitives which combine ease of use with the\r\nability to write maintainable and resilient programs leveraging the\r\nfull power of Unix.  These primitives implements common patterns to\r\ninteract with Unix utilities as subprocesses. These patterns either\r\nyield a string or a stream of lines, which will also adequately report\r\nerror conditions on subprocesses.\r\n\r\n**Rashell** is based on the excellent [Lwt][lwt-home] library and its\r\n[Lwt_process][lwt-process] module.\r\n\r\n[![Build Status](https://travis-ci.org/michipili/rashell.svg?branch=master)](https://travis-ci.org/michipili/rashell?branch=master)\r\n\r\n\r\n## Rashell commands\r\n\r\nThe module *Rashell_Command* defines the description of commands and\r\ncommon patterns to run computation consuming a subprocess executing a\r\ncommand.\r\n\r\n```ocaml\r\n(** The type of command descriptions.\r\n\r\n    As for [Lwt_process.exec], if the [program] name is the empty string,\r\n    then the first argument will be used. You should specify a name only\r\n    if you do not want the executable to be searched in the PATH. On\r\n    Windows the only way to enable automatic seach in PATH is to pass an\r\n    empty name.\r\n\r\n    If [env] supplied, this is the environment of the child\r\n    process, otherwise the environment is inherited.\r\n\r\n    If [workdir] supplied, the child process will be started in\r\n    [workdir] instead of the current working directory. *)\r\ntype t = {\r\n  program: string;\r\n  argv: string array;\r\n  env: string array option;\r\n  workdir: string option;\r\n}\r\n\r\n(** The type of process status. *)\r\ntype process_status = Unix.process_status  =\r\n  | WEXITED of int\r\n  | WSIGNALED of int\r\n  | WSTOPPED of int\r\n\r\nexception Error of t * process_status * string\r\n(** The exception thrown by failed subprocesses.  When the subprocess\r\nconsumed by a computation fails, then the thread yielding the result\r\nof the computation or the thread reading from the stream yielding\r\nresults of the computation will fail with the given exception.\r\n\r\nThe string parameter of the exception is the aggregated standard error\r\noutput of the failed process. *)\r\n```\r\n\r\nThe module implements four computations consuming a subprocess, which\r\nare classfied as utility, test, query and filter.\r\n\r\nA *utility* is a program which is called to perform a computation\r\nwhich results are stored on the filesystem (like *make*, a compiler or\r\ninplace edition with *sed*) or sent on *stdout*, like *uname*,\r\n*uptime* or *hostname*.\r\n\r\n```ocaml\r\n(** Execute the given command and return its exit status, the content\r\n    of stdout and of stderr. *)\r\nval exec_utility : t -> string Lwt.t\r\n```\r\n\r\nA *test* is a program used as a predicate, whose exit status is\r\nexamined: if it is 0, then the predicate is satisfied, if it is 1 then\r\nthe predicate is not satisfied. Other values are interpreted as a\r\nfailure of the program.\r\n\r\n```ocaml\r\n(** Execute the given command and test its exit status. An exit status\r\n    of [0] indicates success of the test, [1] indicates failure of the\r\n    test and other values indicate a general error. *)\r\nval exec_test : t -> bool Lwt.t\r\n```\r\n\r\nA *query* is a program retrieving information structured in records,\r\none on each line.  Such programs are *join*, *paste*, *find*, *ps*,\r\n*sed* and *awk* for instance.\r\n\r\n```ocaml\r\n(** Execute the given command and return a stream reading the output\r\n    of the command and its exit status with error output. *)\r\nval exec_query : t -> string Lwt_stream.t\r\n```\r\n\r\nA *filter* is a program used to transform a stream of lines in a\r\nstream of lines.  Program commonly used as filters are *tr*, *sed*,\r\n*awk*.\r\n\r\n```ocaml\r\n(** Execute the given command and return a function mapping streams,\r\n    and its exit status with error output. *)\r\nval exec_filter : t -> string Lwt_stream.t -> string Lwt_stream.t\r\n```\r\n\r\n\r\n## Other modules\r\n\r\nOther modules builds atop *Rashell_Command* to implement a convenient\r\ninterface to various systems.  At that time, only a few POSIX utilies\r\nhave been wrapped, but the number of available modules should\r\nincrease rapidly.\r\n\r\n\r\n## Free software\r\n\r\nRashell is free software: copying it and redistributing it is\r\nvery much welcome under conditions of the [CeCILL-B][licence-url]\r\nlicence agreement, found in the [COPYING][licence-en] and\r\n[COPYING-FR][licence-fr] files of the distribution.\r\n\r\n\r\n## Setup guide\r\n\r\nIt is easy to install **Rashell** using **opam** and its *pinning*\r\nfeature.  In a shell visiting the repository, say\r\n\r\n```console\r\n% opam pin add rashell .\r\n```\r\n\r\nIt is also possible to install **Rashell** manually.\r\nThe installation procedure is based on the portable build system\r\n[BSD Owl Scripts][bsdowl-home] written for BSD Make.\r\n\r\n1. Verify that prerequisites are installed:\r\n   - BSD Make\r\n   - [BSD OWl][bsdowl-install]\r\n   - OCaml\r\n   - GNU Autoconf\r\n\r\n2. Get the source, either by cloning the repository or by exploding a\r\n   [distribution tarball](releases).\r\n\r\n3. Optionally run `autoconf` to produce a configuration script. This\r\n   is only required if the script is not already present.\r\n\r\n4. Run `./configure`, you can choose the installation prefix with\r\n   `--prefix`.\r\n\r\n5. Run `make build`.\r\n\r\n6. Optionally run `make test` to test your build.\r\n\r\n7. Finally run `make install`.\r\n\r\nDepending on how **BSD Make** is called on your system, you may need to\r\nreplace `make` by `bsdmake` or `bmake` in steps 5, 6, and 7.\r\nThe **GNU Make** program usually give up the ghost, croaking\r\n`*** missing separator. Stop.` when you mistakingly use it instead of\r\n**BSD Make**.\r\n\r\nStep 7 requires that you can `su -` if you are not already `root`.\r\n\r\n\r\nMichael Gr√ºnewald in Bonn, on September 5, 2015\r\n\r\n\r\n  [licence-url]:        http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html\r\n  [licence-en]:         COPYING\r\n  [licence-fr]:         COPYING-FR\r\n  [bsdowl-home]:        https://github.com/michipili/bsdowl\r\n  [bsdowl-install]:     https://github.com/michipili/bsdowl/wiki/Install\r\n  [lwt-home]:           http://ocsigen.org/lwt/\r\n  [lwt-process]:        http://ocsigen.org/lwt/2.5.0/api/Lwt_process\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}